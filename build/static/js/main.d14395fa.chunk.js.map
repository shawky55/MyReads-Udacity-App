{"version":3,"sources":["BooksAPI.js","ToggleShelfes.js","BookTemplate.js","Alert.js","Bookshelf.js","Header.js","Search.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","getAll","fetch","then","res","json","data","books","update","book","shelf","id","method","body","JSON","stringify","search","query","maxResults","ToggleShelfs","updateBook","className","defaultValue","onChange","e","console","log","target","value","disabled","Book","cover","title","author","style","width","height","backgroundImage","Alert","message","Bookshelf","specificBooks","length","filter","map","imageLinks","thumbnail","authors","Header","header","Search","identifyBooks","useState","setQuery","searchResult","setSerchResult","updateSearchResult","identiyBooks","filterdResult","has","get","useEffect","a","undefined","error","searchHanlder","to","type","placeholder","App","setBooks","Map","forEach","set","getBooks","bookIdentifer","updatedShelfs","current","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d14395fa.chunk.js","sourcesContent":["const api = \"https://reactnd-books-api.udacity.com\";\r\n\r\nlet token = localStorage.token;\r\n\r\nif (!token) token = localStorage.token = Math.random().toString(36).substr(-8);\r\n\r\nconst headers = {\r\n    Accept: \"application/json\",\r\n    Authorization: token,\r\n};\r\n\r\nexport const get = (bookId) =>\r\n    fetch(`${api}/books/${bookId}`, { headers })\r\n        .then((res) => res.json())\r\n        .then((data) => data.book);\r\n\r\nexport const getAll = () =>\r\n    fetch(`${api}/books`, { headers })\r\n        .then((res) => res.json())\r\n        .then((data) => data.books);\r\n\r\nexport const update = (book, shelf) =>\r\n    fetch(`${api}/books/${book.id}`, {\r\n        method: \"PUT\",\r\n        headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ shelf }),\r\n    }).then((res) => res.json());\r\n\r\nexport const search = (query, maxResults) =>\r\n    fetch(`${api}/search`, {\r\n        method: \"POST\",\r\n        headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ query, maxResults }),\r\n    })\r\n        .then((res) => res.json())\r\n        .then((data) => data.books);\r\n","const ToggleShelfs = ({ shelf, book, updateBook }) => {\r\n    return (\r\n        <div className=\"book-shelf-changer\">\r\n            <select\r\n                defaultValue={shelf}\r\n                onChange={(e) => {\r\n                    console.log(\"changed\")\r\n                    updateBook(book, e.target.value);\r\n                }}>\r\n                <option disabled>Move to...</option>\r\n                <option value=\"currentlyReading\">Currently Reading</option>\r\n                <option value=\"wantToRead\">Want to Read</option>\r\n                <option value=\"read\">Read</option>\r\n                <option value=\"none\">None</option>\r\n            </select>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ToggleShelfs;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport ToggleShelfs from \"./ToggleShelfes\";\r\n\r\nconst Book = ({book, cover, title, author, shelf, updateBook }) => {\r\n    return (\r\n        \r\n            <li>\r\n                <div className=\"book\">\r\n                    <div className=\"book-top\">\r\n                        <div\r\n                            className=\"book-cover\"\r\n                            style={{\r\n                                width: 128,\r\n                                height: 193,\r\n                                backgroundImage: `url(${cover})`,\r\n                            }}></div>\r\n                        <ToggleShelfs\r\n                            updateBook={updateBook}\r\n                            shelf={shelf}\r\n                            book={book}></ToggleShelfs>\r\n                    </div>\r\n                    <div className=\"book-title\">{title}</div>\r\n                    <div className=\"book-authors\">{author}</div>\r\n                </div>\r\n            </li>\r\n        \r\n    );\r\n};\r\n\r\nexport default Book;\r\n","const Alert = ({message}) => {\r\n    return (\r\n        <div className=\"empty-container\">\r\n            <h1 className=\"empty-com\">{message} </h1>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Alert;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Book from \"./BookTemplate\";\r\nimport Alert from \"./Alert.js\";\r\nconst Bookshelf = ({ books, title, updateBook }) => {\r\n    let specificBooks = [];\r\n    if (books.length) {\r\n        specificBooks = books.filter((book) => book.shelf === title);\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"bookshelf\">\r\n                <h2 className=\"bookshelf-title\">{title}</h2>\r\n                <div className=\"bookshelf-books\">\r\n                    {specificBooks.length === 0 ? (\r\n                        <Alert\r\n                            message={\"There no Books Avaliable on the Shelf\"}\r\n                        />\r\n                    ) : (\r\n                        <ol className=\"books-grid\">\r\n                            {specificBooks.map((book) => {\r\n                                return (\r\n                                    <Book\r\n                                        key={book.id}\r\n                                        id={book.id}\r\n                                        cover={book.imageLinks.thumbnail}\r\n                                        title={book.title}\r\n                                        shelf={book.shelf}\r\n                                        book={book}\r\n                                        updateBook={updateBook}\r\n                                        author={book.authors}\r\n                                    />\r\n                                );\r\n                            })}\r\n                        </ol>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Bookshelf;\r\n","const Header = ({header}) => {\r\n    return (\r\n        <>\r\n            <div className=\"list-books-title\">\r\n                <h1>{header}</h1>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","import { search } from \"./BooksAPI\";\r\nimport { useState, useEffect } from \"react\";\r\nimport Book from \"./BookTemplate\";\r\nimport { Link } from \"react-router-dom\";\r\nconst Search = ({ updateBook, identifyBooks }) => {\r\n    const [query, setQuery] = useState(\"\");\r\n    const [searchResult, setSerchResult] = useState([]);\r\n    const updateSearchResult = (res) => {\r\n        let identiyBooks = identifyBooks();\r\n        let filterdResult = res.map((book) => {\r\n            if (identiyBooks.has(book.id)) {\r\n                return identiyBooks.get(book.id);\r\n            } else {\r\n                return book;\r\n            }\r\n        });\r\n        setSerchResult(filterdResult);\r\n    };\r\n\r\n    useEffect(() => {\r\n        async function searchHanlder() {\r\n            if (query) {\r\n                let res = await search(query);\r\n                if (res === undefined || res?.error) {\r\n                } else {\r\n                    updateSearchResult(res);\r\n                }\r\n            }\r\n        }\r\n        searchHanlder();\r\n\r\n        return () => {\r\n            updateSearchResult([]);\r\n        };\r\n    }, [query]);\r\n    const showSearchQuery = () => {\r\n        return searchResult.map((book) => {\r\n            return (\r\n                <Book\r\n                    key={book.id}\r\n                    id={book.id}\r\n                    cover={book.imageLinks?.thumbnail}\r\n                    title={book.title}\r\n                    shelf={book.shelf ? book.shelf : \"none\"}\r\n                    book={book}\r\n                    updateBook={updateBook}\r\n                    author={book.author && book.authors[0]}\r\n                />\r\n            );\r\n        });\r\n    };\r\n    return (\r\n        <>\r\n            {\" \"}\r\n            <div className=\"search-books\">\r\n                <div className=\"search-books-bar\">\r\n                    <Link to=\"/\" className=\"close-search\">\r\n                        Close\r\n                    </Link>\r\n\r\n                    <div className=\"search-books-input-wrapper\">\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"Search by title, author, or ISBN\"\r\n                            onChange={(e) => setQuery(e.target.value)}\r\n                            value={query}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"search-books-results\">\r\n                    <ol className=\"books-grid\">\r\n                        {searchResult.length ? showSearchQuery() : null}\r\n                    </ol>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Search;\r\n","import \"./App.css\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { getAll, update } from \"./BooksAPI\";\r\nimport { BrowserRouter as Router, Route, Routes, Link } from \"react-router-dom\";\r\nimport Bookshelf from \"./Bookshelf\";\r\nimport Header from \"./Header\";\r\nimport Search from \"./Search\";\r\nimport Alert from \"./Alert\";\r\nfunction App() {\r\n    const [books, setBooks] = useState([]);\r\n    const identifyBooks = () => {\r\n        let map = new Map();\r\n        books.forEach((book) => {\r\n            map.set(book.id, book);\r\n        });\r\n        return map;\r\n    };\r\n\r\n    useEffect(() => {\r\n        async function getBooks() {\r\n            let data = await getAll();\r\n            setBooks(data);\r\n        }\r\n        getBooks();\r\n    }, []);\r\n\r\n    const updateBook = async (book, shelf) => {\r\n        let bookIdentifer = identifyBooks();\r\n        let updatedShelfs = [];\r\n        if (!bookIdentifer.has(book.id)) {\r\n            book.shelf = shelf;\r\n            updatedShelfs = [...books, book];\r\n        } else if (shelf === \"none\") {\r\n            updatedShelfs = books.filter((current) => current.id !== book.id);\r\n        } else {\r\n            updatedShelfs = books.map((current) => {\r\n                if (current.id === book.id) {\r\n                    current.shelf = shelf;\r\n                }\r\n                return current;\r\n            });\r\n        }\r\n        setBooks(updatedShelfs);\r\n        await update(book, shelf);\r\n    };\r\n    return (\r\n        <div className=\"app\">\r\n            <Router>\r\n                <Routes>\r\n                    <Route\r\n                        path=\"/search\"\r\n                        element={\r\n                            <Search\r\n                                updateBook={updateBook}\r\n                                identifyBooks={identifyBooks}\r\n                            />\r\n                        }></Route>\r\n                    <Route\r\n                        path=\"/\"\r\n                        element={\r\n                            <div className=\"list-books\">\r\n                                <Header header={\"My Reads\"} />\r\n                                <div className=\"list-books-content\">\r\n                                    <div>\r\n                                        <Bookshelf\r\n                                            updateBook={updateBook}\r\n                                            title={\"currentlyReading\"}\r\n                                            books={books}\r\n                                        />\r\n                                        <Bookshelf\r\n                                            updateBook={updateBook}\r\n                                            books={books}\r\n                                            title={\"wantToRead\"}></Bookshelf>\r\n                                        <Bookshelf\r\n                                            updateBook={updateBook}\r\n                                            books={books}\r\n                                            title={\"read\"}></Bookshelf>\r\n                                    </div>\r\n                                </div>\r\n                                <Link\r\n                                    className=\"open-search-btn open-search\"\r\n                                    to=\"/search\">\r\n                                    Add a book\r\n                                </Link>\r\n                            </div>\r\n                        }></Route>\r\n                    <Route\r\n                        path=\"*\"\r\n                        element={\r\n                            <Alert message={\"Page not Found\"}></Alert>\r\n                        }></Route>\r\n                </Routes>\r\n            </Router>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}